name: Build and deploy code

on: [push, pull_request]
  # pull_request:
  #   branches:
  #     - "master"
env:
  AWS_REGION: usâ€‘eastâ€‘1
  ECR_REPOSITORY: fastapi_social_media_app

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_PASSWORD               : ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOSTNAME               : ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT                   : ${{ secrets.DATABASE_PORT }}
      DATABASE_NAME                   : ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME               : ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY                      : ${{ secrets.SECRET_KEY }}
      ALGORITHM                       : ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES     : ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
    services:
      postgres: 
        image: postgres
        env:
          # POSTGRES_USER: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_PASSWORD           : ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB                 : ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    runs-on: ubuntu-latest
    steps:
      - 
        name: pull git repo 
        uses: actions/checkout@v4
      - 
        name: set up python v3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - 
        name: upgrade pip 
        run: python -m pip install --upgrade pip
      - 
        name: install requirements
        run: pip install -r requirements.txt
      - 
        name: run pytest
        run: |
          pip install pytest
          pytest -v -s --disable-warnings
  
  
  # deploy:
  #   name: ðŸš€ Deploy to ECS
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-to-assume: arn:aws:iam::123456789012:role/YourCiCdRole

  #     - name: Deploy new task definition to ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ecs/taskdef.json
  #         service:          fastapi-service
  #         cluster:          fastapi-cluster
  #         wait-for-service-stability: true
  #         container-name:  fastapi
  #         container-image: ${{ steps.build-and-push.outputs.image }}

  
      # not using docker now so commenting out to save build resources
  dockerize:
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          builder: ${{steps.buildx.outputs.name}}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_social_media_app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      -
        name: Image digest
        run: echo ${{steps.docker_build.outputs.digest}}